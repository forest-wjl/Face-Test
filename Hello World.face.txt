import cv2


def improved_smile_and_position_detection():
    face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
    smile_cascade = cv2.CascadeClassifier('haarcascade_smile.xml')
    if face_cascade.empty():
        print("错误：无法加载人脸检测模型，请确认haarcascade_frontalface_default.xml文件存在")
        return
    if smile_cascade.empty():
        print("错误：无法加载微笑检测模型，请确认haarcascade_smile.xml文件存在")
        return
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("错误：无法打开摄像头")
        return
    smile_counter = 0
    CONSECUTIVE_FRAMES = 3

    while True:
        ret, frame = cap.read()
        if not ret:
            print("警告：无法获取图像帧，将重试...")
            continue
        frame = cv2.flip(frame, 1)

        height, width = frame.shape[:2]
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        gray = cv2.GaussianBlur(gray, (3, 3), 0)
        faces = face_cascade.detectMultiScale(
            gray,
            scaleFactor=1.1,
            minNeighbors=8,
            minSize=(50, 50)
        )
        for (x, y, w, h) in faces:

            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)


            face_center_x = x + w // 2
            face_center_y = y + h // 2
            if face_center_x < width / 3:
                horizontal_pos = "left"
            elif face_center_x < 2 * width / 3:
                horizontal_pos = "center"
            else:
                horizontal_pos = "right"

            if face_center_y < height / 3:
                vertical_pos = "up"
            elif face_center_y < 2 * height / 3:
                vertical_pos = "center"
            else:
                vertical_pos = "down"

            position = f"{horizontal_pos}{vertical_pos}"
            if position == "centercenter":
                position = "center"
            if position == "rightcenter":
                position = "right"
            if position == "leftcenter":
                position = "left"
            if position == "centerup":
                position = "up"
            if position == "centerdown":
                position = "down"

            roi_gray = gray[y + h // 2: y + h, x: x + w]
            roi_color = frame[y + h // 2: y + h, x: x + w]


            smiles = smile_cascade.detectMultiScale(
                roi_gray,
                scaleFactor=1.8,
                minNeighbors=25,
                minSize=(50, 50),
                flags=cv2.CASCADE_SCALE_IMAGE
            )


            current_smile = len(smiles) > 0


            if current_smile:
                smile_counter += 1

                if smile_counter > CONSECUTIVE_FRAMES:
                    smile_counter = CONSECUTIVE_FRAMES
            else:
                smile_counter = 0


            if smile_counter >= CONSECUTIVE_FRAMES:

                cv2.putText(
                    frame,
                    "Smile",
                    (x, y - 20),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    0.8,
                    (0, 0, 255),
                    2
                )
            else:

                cv2.putText(
                    frame,
                    "no smile",
                    (x, y - 20),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    0.8,
                    (255, 0, 0),
                    2
                )


            cv2.putText(
                frame,
                f"position:{position}",
                (x, y + h + 30),
                cv2.FONT_HERSHEY_SIMPLEX,
                0.7,
                (0, 255, 255),
                2
            )

            for (sx, sy, sw, sh) in smiles:
                cv2.rectangle(roi_color, (sx, sy), (sx + sw, sy + sh), (255, 0, 0), 2)

        cv2.putText(
            frame,
            "Press 'q' to exit",
            (10, 30),
            cv2.FONT_HERSHEY_SIMPLEX,
            0.7,
            (255, 255, 255),
            2
        )
        cv2.imshow('Face Smile & Position Detection', frame)

        key = cv2.waitKey(1)
        if key == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()


if __name__ == "__main__":
    improved_smile_and_position_detection()
    print("程序已正常结束")
    